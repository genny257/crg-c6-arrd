// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  email                     String    @unique
  password                  String
  role                      UserRole  @default(VOLUNTEER)
  status                    UserStatus @default(PENDING)
  matricule                 String?   @unique

  // Personal Info
  firstName                 String
  lastName                  String
  photo                     String?
  sex                       String?
  birthDate                 DateTime? @db.Date
  birthPlace                String?
  maritalStatus             String?
  idType                    String?
  idNumber                  String?
  address                   String?
  phone                     String?

  // Residence
  residenceProvince         String?
  residenceDepartement      String?
  residenceCommuneCanton    String?
  residenceArrondissement   String?
  residenceQuartierVillage  String?

  // Profile Info
  volunteerExperience       String?
  availability              String[]
  causes                    String[]
  assignedCell              String?
  isVolunteerOfTheMonth     Boolean   @default(false)
  
  // Relations
  nationalityId             String?
  nationality               Nationality? @relation(fields: [nationalityId], references: [id])
  
  educationLevelId          String?
  educationLevel            EducationLevel? @relation(fields: [educationLevelId], references: [id])
  
  professionId              String?
  profession                Profession? @relation(fields: [professionId], references: [id])
  
  skills                    Skill[]   @relation("UserSkills")
  missions                  Mission[] @relation("MissionParticipants")
  teamRole                  TeamRole? @relation(fields: [teamRoleId], references: [id])
  teamRoleId                String?   @unique
  coordinatedPools          TeamPool[] @relation("PoolCoordinators")
  authoredArchives          ArchiveItem[] @relation("ArchiveAuthor")

  // Timestamps
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String?
  image     String?
  imageHint String?
  visible   Boolean  @default(true)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // No direct author relation to avoid cascading issues on user deletion
}

model Mission {
  id              String   @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  maxParticipants Int?
  participants    User[]   @relation("MissionParticipants")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Donation {
  id                    String        @id @default(cuid())
  externalTransactionId String?       @unique
  amount                Float
  name                  String
  email                 String
  phone                 String?
  type                  String // "Ponctuel" or "Mensuel"
  method                DonationMethod
  status                DonationStatus @default(PENDING)
  airtelMoneyId         String?       @unique
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Report {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  visible   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CorporateSponsorship {
  id           String             @id @default(cuid())
  companyName  String
  contactName  String
  email        String
  phone        String?
  message      String
  status       SponsorshipStatus  @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model Event {
    id          String      @id @default(cuid())
    title       String
    description String
    location    String
    date        DateTime
    image       String?
    imageHint   String?
    status      EventStatus @default(UPCOMING)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Appointment {
    id            String            @id @default(cuid())
    name          String
    email         String
    phone         String?
    reason        String // VOLUNTEERING_INFO, TRAINING_INFO, PARTNERSHIP, OTHER
    details       String?
    scheduledAt   DateTime
    status        AppointmentStatus @default(PENDING)
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
}

// Security & Logging
model RequestLog {
  id          String   @id @default(cuid())
  ip          String
  method      String
  path        String
  statusCode  Int
  userAgent   String
  isThreat    Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  createdAt DateTime @default(now())
}


// --- HOMEPAGE CONTENT ---
model Action {
  id                String   @id @default(cuid())
  title             String
  description       String
  image             String
  imageHint         String?
  dialogTitle       String
  dialogDescription String
  dialogList        String[]
  order             Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Partner {
  id          String   @id @default(cuid())
  name        String   @unique
  logoUrl     String
  websiteUrl  String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AnnualStat {
    id                  String      @id @default(cuid())
    year                Int         @unique
    bases               Int         @default(0)
    agents              Int         @default(0)
    firstAidGraduates   Int         @default(0)
    assistedHouseholds  Int         @default(0)
    sensitizedPeople    Int         @default(0)
    condomsDistributed  Int         @default(0)
    isVisible           Boolean     @default(false)
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
}

// --- TEAM MANAGEMENT ---
model TeamRole {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  user        User?
}

model TeamPool {
    id              String      @id @default(cuid())
    name            String      @unique
    description     String?
    type            PoolType
    iconKey         String?
    coordinators    User[]      @relation("PoolCoordinators")
}


// --- ARCHIVE SYSTEM ---
model ArchiveItem {
  id        String          @id @default(cuid())
  name      String
  type      ArchiveItemType
  url       String?
  authorId  String
  author    User            @relation("ArchiveAuthor", fields: [authorId], references: [id])
  parentId  String?
  parent    ArchiveItem?    @relation("FolderChildren", fields: [parentId], references: [id])
  children  ArchiveItem[]   @relation("FolderChildren")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}


// --- GENERIC LISTS FOR FORMS ---
model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Profession {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model EducationLevel {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Nationality {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

// --- PAYMENT SERVICES ---
model PaymentService {
    id          String  @id @default(cuid())
    name        String  @unique
    isActive    Boolean @default(false)
    isDefault   Boolean @default(false)
    apiKeys     Json?
}

// Enums
enum UserRole {
  VOLUNTEER
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum DonationMethod {
    AirtelMoney
    MoovMoney
    PayPal
}

enum SponsorshipStatus {
  PENDING
  CONTACTED
  IN_DISCUSSION
  CONFIRMED
  REJECTED
}

enum EventStatus {
  UPCOMING
  PAST
  CANCELLED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PoolType {
    OPERATIONAL
    SUPPORT
}

enum ArchiveItemType {
    FOLDER
    DOCUMENT
    SPREADSHEET
    IMAGE
    VIDEO
    AUDIO
    PDF
    ARCHIVE
    TEXT
    UNKNOWN
}
