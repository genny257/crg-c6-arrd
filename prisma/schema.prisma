// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String                 @id @default(cuid())
  matricule                 String                 @unique
  firstName                 String
  lastName                  String
  email                     String                 @unique
  password                  String
  phone                     String?
  birthDate                 DateTime?
  birthPlace                String?
  sex                       String?
  maritalStatus             String?
  idType                    String?
  idNumber                  String?
  address                   String?
  residenceProvince         String?
  residenceDepartement      String?
  residenceCommuneCanton    String?
  residenceArrondissement   String?
  residenceQuartierVillage  String?
  photo                     String?
  idCardFront               String?
  idCardBack                String?
  volunteerExperience       String?
  availability              String[]
  causes                    String[]
  assignedCell              String?
  termsAccepted             Boolean                @default(false)
  role                      UserRole               @default(VOLUNTEER)
  status                    UserStatus             @default(PENDING)
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  posts                     Post[]
  missions                  Mission[]              @relation("MissionParticipants")
  skills                    Skill[]                @relation("UserSkills")
  profession                Profession?            @relation(fields: [professionId], references: [id])
  professionId              String?
  educationLevel            EducationLevel?        @relation(fields: [educationLevelId], references: [id])
  educationLevelId          String?
  nationality               Nationality?           @relation(fields: [nationalityId], references: [id])
  nationalityId             String?
  createdArchiveItems       ArchiveItem[]
  teamRole                  TeamRole?              @relation(fields: [teamRoleId], references: [id])
  teamRoleId                String?
  coordinatedPools          TeamPool[]             @relation("PoolCoordinators")
  isVolunteerOfTheMonth     Boolean                @default(false)

  @@map("users")
}

model TeamRole {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  users       User[]
}

model TeamPool {
  id           String      @id @default(cuid())
  name         String      @unique
  description  String?
  iconKey      String?
  type         PoolType    @default(OPERATIONAL)
  coordinators User[]      @relation("PoolCoordinators")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum PoolType {
  OPERATIONAL
  SUPPORT
}

model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Profession {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model EducationLevel {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Nationality {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Mission {
  id              String        @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  maxParticipants Int?
  participants    User[]        @relation("MissionParticipants")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Post {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  excerpt    String
  content    String?
  image      String?
  imageHint  String?
  visible    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
}

model Report {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  visible   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id                    String         @id @default(cuid())
  name                  String
  email                 String
  phone                 String
  amount                Float
  type                  String
  method                DonationMethod
  status                DonationStatus @default(PENDING)
  externalTransactionId String?        @unique
  airtelMoneyId         String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum DonationMethod {
  AirtelMoney
  MoovMoney
  PayPal
}

model CorporateSponsorship {
  id          String            @id @default(cuid())
  companyName String
  contactName String
  email       String
  phone       String?
  message     String
  status      SponsorshipStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum SponsorshipStatus {
  PENDING
  CONTACTED
  IN_DISCUSSION
  CONFIRMED
  REJECTED
}

model RequestLog {
  id          String   @id @default(cuid())
  ip          String
  method      String
  path        String
  statusCode  Int
  userAgent   String
  isThreat    Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  createdAt DateTime @default(now())
}

model ArchiveItem {
  id        String          @id @default(cuid())
  name      String
  type      ArchiveItemType
  url       String?
  parentId  String?
  parent    ArchiveItem?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  ArchiveItem[]   @relation("FolderHierarchy")
  createdAt DateTime        @default(now())
  authorId  String
  author    User            @relation(fields: [authorId], references: [id])

  @@unique([name, parentId])
}

enum ArchiveItemType {
  FOLDER
  DOCUMENT
  SPREADSHEET
  IMAGE
  VIDEO
  AUDIO
  PDF
  ARCHIVE
  TEXT
  UNKNOWN
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  location    String
  date        DateTime
  image       String?
  imageHint   String?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum EventStatus {
  UPCOMING
  PAST
  CANCELLED
}

model Appointment {
  id           String            @id @default(cuid())
  name         String
  email        String
  phone        String?
  reason       AppointmentReason
  details      String?
  scheduledAt  DateTime
  status       AppointmentStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

enum AppointmentReason {
  VOLUNTEERING_INFO
  TRAINING_INFO
  PARTNERSHIP
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model AnnualStat {
  id                 String   @id @default(cuid())
  year               Int      @unique
  bases              Int      @default(0)
  agents             Int      @default(0)
  firstAidGraduates  Int      @default(0)
  assistedHouseholds Int      @default(0)
  sensitizedPeople   Int      @default(0)
  condomsDistributed Int      @default(0)
  isVisible          Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Action {
  id                String   @id @default(cuid())
  title             String
  description       String
  image             String
  imageHint         String?
  dialogTitle       String
  dialogDescription String
  dialogList        String[]
  order             Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Partner {
  id         String   @id @default(cuid())
  name       String   @unique
  logoUrl    String
  websiteUrl String?
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PaymentService {
  id        String  @id @default(cuid())
  name      String  @unique
  isActive  Boolean @default(false)
  isDefault Boolean @default(false)
  apiKeys   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  VOLUNTEER
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}
