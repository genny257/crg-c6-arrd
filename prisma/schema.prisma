// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  firstName               String
  lastName                String
  matricule               String    @unique
  role                    UserRole  @default(VOLUNTEER)
  status                  UserStatus @default(PENDING)

  // Personal Information
  nationalityId           String?
  nationality             Nationality? @relation(fields: [nationalityId], references: [id])
  birthDate               DateTime?
  birthPlace              String?
  sex                     String?
  maritalStatus           String?
  idType                  String?
  idNumber                String?

  // Contact Information
  phone                   String?
  address                 String?
  residenceProvince       String?
  residenceDepartement    String?
  residenceCommuneCanton  String?
  residenceArrondissement String?
  residenceQuartierVillage String?

  // Profile Information
  educationLevelId        String?
  educationLevel          EducationLevel? @relation(fields: [educationLevelId], references: [id])
  professionId            String?
  profession              Profession? @relation(fields: [professionId], references: [id])
  skills                  Skill[]
  volunteerExperience     String?
  availability            String[]
  causes                  String[]
  assignedCell            String?
  photo                   String?
  idCardFront             String?
  idCardBack              String?

  // Relations
  posts                   Post[]
  missions                Mission[] @relation("MissionParticipants")
  teamRole                TeamRole? @relation(fields: [teamRoleId], references: [id])
  teamRoleId              String?
  coordinatingPools       TeamPool[] @relation("TeamPoolCoordinators")
  authoredArchives        ArchiveItem[]

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Nationality {
  id      String @id @default(cuid())
  name    String @unique
  users   User[]
}

model EducationLevel {
  id      String @id @default(cuid())
  name    String @unique
  users   User[]
}

model Profession {
  id      String @id @default(cuid())
  name    String @unique
  users   User[]
}

model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model TeamRole {
  id            String @id @default(cuid())
  name          String @unique
  description   String?
  users         User[]
}

model TeamPool {
  id              String @id @default(cuid())
  name            String @unique
  description     String?
  iconKey         String?
  type            PoolType @default(OPERATIONAL)
  coordinators    User[]   @relation("TeamPoolCoordinators")
}

model Mission {
  id              String        @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  participants    User[]        @relation("MissionParticipants")
  maxParticipants Int?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Post {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  excerpt    String
  content    String?
  image      String?
  imageHint  String?
  visible    Boolean  @default(true)
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Report {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  visible   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
    id        String      @id @default(cuid())
    title     String
    description String
    location  String
    date      DateTime
    image     String?
    imageHint String?
    status    EventStatus @default(UPCOMING)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model Donation {
  id                    String         @id @default(cuid())
  amount                Float
  name                  String
  email                 String
  phone                 String
  type                  String // "Ponctuel" or "Mensuel"
  method                DonationMethod
  status                DonationStatus @default(PENDING)
  externalTransactionId String?        @unique
  airtelMoneyId         String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model CorporateSponsorship {
  id          String   @id @default(cuid())
  companyName String
  contactName String
  email       String
  phone       String?
  message     String
  status      SponsorshipStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PaymentService {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(false)
  isDefault Boolean  @default(false)
  apiKeys   Json?    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArchiveItem {
    id          String      @id @default(cuid())
    name        String
    type        ArchiveItemType
    url         String?
    parentId    String?
    parent      ArchiveItem? @relation("FolderChildren", fields: [parentId], references: [id])
    children    ArchiveItem[] @relation("FolderChildren")
    authorId    String
    author      User        @relation(fields: [authorId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model RequestLog {
  id         String @id @default(cuid())
  ip         String
  method     String
  path       String
  statusCode Int
  userAgent  String
  isThreat   Boolean @default(false)
  createdAt  DateTime @default(now())
}

model BlockedIP {
  id        String @id @default(cuid())
  ip        String @unique
  reason    String?
  createdAt DateTime @default(now())
}

model Appointment {
  id          String            @id @default(cuid())
  name        String
  email       String
  phone       String?
  reason      AppointmentReason
  details     String?
  scheduledAt DateTime
  status      AppointmentStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}


// --- ENUMS ---

enum UserRole {
  VOLUNTEER
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

enum PoolType {
  OPERATIONAL
  SUPPORT
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DonationMethod {
  AirtelMoney
  Pursa
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum SponsorshipStatus {
    PENDING
    CONTACTED
    IN_DISCUSSION
    CONFIRMED
    REJECTED
}

enum EventStatus {
    UPCOMING
    PAST
    CANCELLED
}

enum ArchiveItemType {
  FOLDER
  DOCUMENT
  SPREADSHEET
  IMAGE
  VIDEO
  AUDIO
  PDF
  ARCHIVE
  TEXT
  UNKNOWN
}

enum AppointmentReason {
  VOLUNTEERING_INFO
  TRAINING_INFO
  PARTNERSHIP
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// Models for generic lists, can be seeded or managed
model Province {
  id           String         @id @default(cuid())
  name         String         @unique
  departements Departement[]
}

model Departement {
  id             String           @id @default(cuid())
  name           String
  province       Province         @relation(fields: [provinceId], references: [id])
  provinceId     String
  communeCantons CommuneCanton[]
}

model CommuneCanton {
  id              String            @id @default(cuid())
  name            String
  departement     Departement       @relation(fields: [departementId], references: [id])
  departementId   String
  arrondissements Arrondissement[]
}

model Arrondissement {
  id               String            @id @default(cuid())
  name             String
  communeCanton    CommuneCanton     @relation(fields: [communeCantonId], references: [id])
  communeCantonId  String
  quartierVillages QuartierVillage[]
}

model QuartierVillage {
  id               String         @id @default(cuid())
  name             String
  arrondissement   Arrondissement @relation(fields: [arrondissementId], references: [id])
  arrondissementId String
}
