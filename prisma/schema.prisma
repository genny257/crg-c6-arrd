// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  matricule               String?  @unique
  email                   String   @unique
  password                String
  firstName               String
  lastName                String
  photo                   String?
  role                    UserRole @default(VOLUNTEER)
  status                  UserStatus @default(PENDING)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Personal Information
  nationalityId           String?
  nationality             Nationality? @relation(fields: [nationalityId], references: [id])
  birthDate               DateTime?
  birthPlace              String?
  sex                     String? // masculin, féminin
  maritalStatus           String? // célibataire, marié(e), divorcé(e), veuf(ve)
  idType                  String?
  idNumber                String?

  // Contact
  phone                   String?
  address                 String?
  residenceProvince       String?
  residenceDepartement    String?
  residenceCommuneCanton  String?
  residenceArrondissement String?
  residenceQuartierVillage String?

  // Profile
  educationLevelId       String?
  educationLevel         EducationLevel? @relation(fields: [educationLevelId], references: [id])
  professionId           String?
  profession             Profession? @relation(fields: [professionId], references: [id])
  skills                 Skill[]
  volunteerExperience    String?
  availability           String[]
  causes                 String[]
  assignedCell           String?

  // Attachments
  idCardFront             String?
  idCardBack              String?

  // Team Structure
  teamRoleId              String?
  teamRole                TeamRole? @relation(fields: [teamRoleId], references: [id])
  coordinatorOfPools      TeamPool[] @relation("PoolCoordinators")

  // Relationships
  missions                Mission[]
  authoredArchives        ArchiveItem[]

  // Terms
  termsAccepted          Boolean @default(false)
}

model Mission {
  id              String   @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  participants    User[]
  maxParticipants Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum UserRole {
  SUPERADMIN
  ADMIN
  COORDINATOR
  VOLUNTEER
  DONOR
  PUBLIC
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

// Model for blog posts
model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String?
  image       String?
  imageHint   String?
  visible     Boolean  @default(true)
  authorId    String
  // author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model for downloadable reports
model Report {
  id          String   @id @default(cuid())
  title       String
  fileUrl     String
  visible     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model for donations
model Donation {
  id              String         @id @default(cuid())
  amount          Float
  name            String
  email           String
  method          DonationMethod
  type            DonationType
  status          DonationStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Fields for external payment provider
  externalTransactionId String?    @unique @map("external_transaction_id")
  airtelMoneyId         String?    @unique @map("airtel_money_id")
}

enum DonationMethod {
  Mobile_Money
  AirtelMoney
  Carte_Bancaire
}

enum DonationType {
  Ponctuel
  Mensuel
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

// Model for corporate sponsorships
model CorporateSponsorship {
  id          String   @id @default(cuid())
  companyName String
  contactName String
  email       String
  phone       String?
  message     String
  status      SponsorshipStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SponsorshipStatus {
  PENDING
  CONTACTED
  IN_DISCUSSION
  CONFIRMED
  REJECTED
}


// --- Models for generic lists ---
model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Profession {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model EducationLevel {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Nationality {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

// --- Models for location data ---
model Province {
  id   String @id @default(cuid())
  name String @unique
}
model Departement {
  id   String @id @default(cuid())
  name String @unique
}
model CommuneCanton {
  id   String @id @default(cuid())
  name String @unique
}
model Arrondissement {
  id   String @id @default(cuid())
  name String @unique
}
model QuartierVillage {
  id   String @id @default(cuid())
  name String @unique
}

// --- Models for Team Structure ---
model TeamRole {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  users       User[]
}

model TeamPool {
  id              String  @id @default(cuid())
  name            String  @unique
  description     String?
  iconKey         String?
  type            PoolType
  coordinators    User[] @relation("PoolCoordinators")
}

enum PoolType {
  OPERATIONAL
  SUPPORT
}

// --- Security and Logging Models ---
model RequestLog {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  ip          String
  method      String
  path        String
  statusCode  Int
  userAgent   String?
  isThreat    Boolean     @default(false)
}

model BlockedIP {
    id          String      @id @default(cuid())
    ip          String      @unique
    reason      String?
    createdAt   DateTime    @default(now())
}

// --- Archive System ---
model ArchiveItem {
  id        String   @id @default(cuid())
  name      String
  type      ArchiveItemType
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  parentId  String?
  parent    ArchiveItem?  @relation("FolderChildren", fields: [parentId], references: [id])
  children  ArchiveItem[] @relation("FolderChildren")

  @@unique([name, parentId])
}

enum ArchiveItemType {
  FOLDER
  DOCUMENT
  SPREADSHEET
  IMAGE
  VIDEO
  AUDIO
  PDF
  ARCHIVE
  TEXT
  UNKNOWN
}

// --- Events ---
model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  location    String
  date        DateTime
  image       String?
  imageHint   String?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum EventStatus {
  UPCOMING
  PAST
  CANCELLED
}

// Payment Gateway Services
model PaymentService {
    id        String      @id @default(cuid())
    name      String      @unique // e.g., "Stripe", "Pursa"
    isActive  Boolean     @default(false)
    isDefault Boolean     @default(false)
    apiKeys   Json?       // To store API keys like secret_key, public_key
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}
