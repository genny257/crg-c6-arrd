// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                  @id @default(cuid())
  matricule                 String?                 @unique
  firstName                 String
  lastName                  String
  email                     String                  @unique
  password                  String
  role                      UserRole                @default(VOLUNTEER)
  status                    UserStatus              @default(PENDING)
  phone                     String?
  birthDate                 DateTime?
  birthPlace                String?
  sex                       String?
  maritalStatus             String?
  idType                    String?
  idNumber                  String?
  address                   String?
  residenceProvince         String?
  residenceDepartement      String?
  residenceCommuneCanton    String?
  residenceArrondissement   String?
  residenceQuartierVillage  String?
  volunteerExperience       String?
  availability              String[]
  causes                    String[]
  assignedCell              String?
  photo                     String?
  idCardFront               String?
  idCardBack                String?
  termsAccepted             Boolean                 @default(false)
  isVolunteerOfTheMonth     Boolean                 @default(false)
  posts                     Post[]
  nationality               Nationality?            @relation(fields: [nationalityId], references: [id])
  nationalityId             String?
  educationLevel            EducationLevel?         @relation(fields: [educationLevelId], references: [id])
  educationLevelId          String?
  profession                Profession?             @relation(fields: [professionId], references: [id])
  professionId              String?
  skills                    Skill[]                 @relation("UserSkills")
  missions                  Mission[]               @relation("MissionParticipants")
  teamRole                  TeamRole?               @relation(fields: [teamRoleId], references: [id])
  teamRoleId                String?
  coordinatedPools          TeamPool[]              @relation("PoolCoordinators")
  authoredArchiveItems      ArchiveItem[]
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
}

model Nationality {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model EducationLevel {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Profession {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String?
  image       String?
  imageHint   String?
  visible     Boolean  @default(true)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mission {
  id              String        @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  maxParticipants Int?
  participants    User[]        @relation("MissionParticipants")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  location    String
  date        DateTime
  image       String?
  imageHint   String?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Report {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  visible   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id                    String         @id @default(cuid())
  amount                Float
  name                  String
  email                 String
  phone                 String
  type                  String // "Ponctuel" or "Mensuel"
  method                DonationMethod
  status                DonationStatus @default(PENDING)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  externalTransactionId String?        @unique
  airtelMoneyId         String?
}

model CorporateSponsorship {
  id          String            @id @default(cuid())
  companyName String
  contactName String
  email       String
  phone       String?
  message     String
  status      SponsorshipStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Appointment {
  id          String            @id @default(cuid())
  name        String
  email       String
  phone       String?
  reason      String // Using String for flexibility, can be an enum
  details     String?
  scheduledAt DateTime
  status      AppointmentStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model AnnualStat {
  id                  String  @id @default(cuid())
  year                Int     @unique
  bases               Int
  agents              Int
  firstAidGraduates   Int
  assistedHouseholds  Int
  sensitizedPeople    Int
  condomsDistributed  Int
  isVisible           Boolean @default(false)
}

model Action {
  id                String   @id @default(cuid())
  title             String
  description       String
  image             String
  imageHint         String?
  dialogTitle       String
  dialogDescription String
  dialogList        String[]
  order             Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Partner {
  id         String   @id @default(cuid())
  name       String   @unique
  logoUrl    String
  websiteUrl String?
  order      Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PaymentService {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(false)
  isDefault Boolean  @default(false)
  apiKeys   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamRole {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  users       User[]
}

model TeamPool {
  id           String  @id @default(cuid())
  name         String  @unique
  description  String?
  iconKey      String?
  type         PoolType
  coordinators User[]  @relation("PoolCoordinators")
}

model ArchiveItem {
  id        String          @id @default(cuid())
  name      String
  type      ArchiveItemType
  url       String?
  parentId  String?
  parent    ArchiveItem?    @relation("FolderChildren", fields: [parentId], references: [id], onDelete: Cascade)
  children  ArchiveItem[]   @relation("FolderChildren")
  authorId  String
  author    User            @relation(fields: [authorId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model RequestLog {
  id         String   @id @default(cuid())
  ip         String
  method     String
  path       String
  statusCode Int
  userAgent  String
  isThreat   Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  createdAt DateTime @default(now())
}

enum ArchiveItemType {
  FOLDER
  DOCUMENT
  SPREADSHEET
  IMAGE
  VIDEO
  AUDIO
  PDF
  ARCHIVE
  TEXT
  UNKNOWN
}

enum PoolType {
  OPERATIONAL
  SUPPORT
}

enum UserRole {
  VOLUNTEER
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum EventStatus {
  UPCOMING
  PAST
  CANCELLED
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum DonationMethod {
  AirtelMoney
  MoovMoney
  PayPal
}

enum SponsorshipStatus {
  PENDING
  CONTACTED
  IN_DISCUSSION
  CONFIRMED
  REJECTED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
