// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model: Represents both administrators and volunteers
model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  password                String
  firstName               String
  lastName                String
  role                    UserRole  @default(VOLUNTEER)
  status                  UserStatus @default(PENDING)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Volunteer-specific profile information
  matricule               String?   @unique
  birthDate               DateTime?
  birthPlace              String?
  sex                     String?
  maritalStatus           String?
  idType                  String?
  idNumber                String?
  phone                   String?
  address                 String?
  
  residenceProvince         String?
  residenceDepartement      String?
  residenceCommuneCanton    String?
  residenceArrondissement   String?
  residenceQuartierVillage  String?

  professionId            String?
  profession              Profession? @relation(fields: [professionId], references: [id])
  
  educationLevelId        String?
  educationLevel          EducationLevel? @relation(fields: [educationLevelId], references: [id])
  
  nationalityId           String?
  nationality             Nationality? @relation(fields: [nationalityId], references: [id])

  skills                  Skill[]   @relation("UserSkills")
  
  volunteerExperience     String?
  availability            String[]
  causes                  String[]
  assignedCell            String?

  photo                   String?
  idCardFront             String?
  idCardBack              String?

  termsAccepted           Boolean?

  // Relationships
  missions                Mission[] @relation("MissionParticipants")
  posts                   Post[]    // If users can author blog posts
}

enum UserRole {
  SUPERADMIN
  ADMIN
  VOLUNTEER
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}


model Mission {
  id              String   @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  maxParticipants Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  participants    User[]   @relation("MissionParticipants")
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  image       String?
  imageHint   String?
  visible     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}


model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String
  image       String?
  imageHint   String?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum EventStatus {
  UPCOMING
  COMPLETED
  CANCELLED
}


model Report {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  visible   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id        String   @id @default(cuid())
  amount    Float
  name      String
  email     String
  type      DonationType
  method    DonationMethod
  status    DonationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DonationType {
  ONE_TIME
  MONTHLY
}

enum DonationMethod {
  CREDIT_CARD
  MOBILE_MONEY
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

model CorporateSponsorship {
  id          String   @id @default(cuid())
  companyName String
  contactName String
  email       String
  phone       String?
  message     String
  status      SponsorshipStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SponsorshipStatus {
  PENDING
  CONTACTED
  IN_PROGRESS
  CLOSED_WON
  CLOSED_LOST
}

model RequestLog {
  id         String   @id @default(cuid())
  ip         String
  method     String
  path       String
  statusCode Int
  userAgent  String?
  isThreat   Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  createdAt DateTime @default(now())
}

// Reusable entities for dropdowns / relations
model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Profession {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model EducationLevel {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Nationality {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

// Location models
model Province {
  id           String         @id @default(cuid())
  name         String         @unique
  departements Departement[]
}

model Departement {
  id              String            @id @default(cuid())
  name            String
  province        Province          @relation(fields: [provinceId], references: [id])
  provinceId      String
  communesCantons CommuneCanton[]
  @@unique([name, provinceId])
}

model CommuneCanton {
  id              String            @id @default(cuid())
  name            String
  departement     Departement       @relation(fields: [departementId], references: [id])
  departementId   String
  arrondissements Arrondissement[]
  @@unique([name, departementId])
}

model Arrondissement {
  id                String            @id @default(cuid())
  name              String
  communeCanton     CommuneCanton     @relation(fields: [communeCantonId], references: [id])
  communeCantonId   String
  quartiersVillages QuartierVillage[]
  @@unique([name, communeCantonId])
}

model QuartierVillage {
  id                String         @id @default(cuid())
  name              String
  arrondissement    Arrondissement? @relation(fields: [arrondissementId], references: [id])
  arrondissementId  String?
  @@unique([name, arrondissementId])
}