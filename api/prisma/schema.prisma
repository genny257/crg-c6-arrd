// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                 @id @default(cuid())
  matricule               String                 @unique
  firstName               String
  lastName                String
  email                   String                 @unique
  password                String
  phone                   String?
  photo                   String?
  birthDate               DateTime?              @db.Date
  birthPlace              String?
  sex                     String?
  maritalStatus           String?
  idType                  String?
  idNumber                String?
  address                 String?
  residenceProvince       String?
  residenceDepartement    String?
  residenceCommuneCanton  String?
  residenceArrondissement String?
  residenceQuartierVillage String?
  volunteerExperience   String?
  availability            String[]
  causes                  String[]
  assignedCell            String?
  role                    UserRole               @default(VOLUNTEER)
  status                  UserStatus             @default(PENDING)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  missions                Mission[]              @relation("MissionParticipants")
  posts                   Post[]
  skills                  Skill[]                @relation("UserSkills")
  profession              Profession?            @relation(fields: [professionId], references: [id])
  professionId            String?
  educationLevel          EducationLevel?        @relation(fields: [educationLevelId], references: [id])
  educationLevelId        String?
  nationality             Nationality?           @relation(fields: [nationalityId], references: [id])
  nationalityId           String?
  teamRole                TeamRole?              @relation(fields: [teamRoleId], references: [id])
  teamRoleId              String?
  coordinatedPools        TeamPool[]             @relation("PoolCoordinators")
}

model Mission {
  id              String        @id @default(cuid())
  title           String
  description     String        @db.Text
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  maxParticipants Int?
  participants    User[]        @relation("MissionParticipants")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String?  @db.Text
  image     String?
  imageHint String?
  visible   Boolean  @default(true)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id        String         @id @default(cuid())
  name      String
  email     String
  amount    Float
  type      DonationType
  method    DonationMethod
  status    DonationStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  location    String
  date        DateTime
  image       String?
  imageHint   String?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Report {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  visible   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CorporateSponsorship {
  id           String            @id @default(cuid())
  companyName  String
  contactName  String
  email        String
  phone        String?
  message      String            @db.Text
  status       SponsorshipStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model TeamRole {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Président du Comité", "Vice-Présidente", "Point Focal", "Coordinateur de pôle"
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamPool {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String?
  iconKey      String?
  type         PoolType // "OPERATIONAL" or "SUPPORT"
  coordinators User[]    @relation("PoolCoordinators")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Security & Logging Models
model RequestLog {
  id        String   @id @default(cuid())
  ip        String
  method    String
  path      String
  statusCode Int
  userAgent String?
  isThreat  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  createdAt DateTime @default(now())
}

// Generic data models for dropdowns
model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Profession {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model EducationLevel {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Nationality {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Province {
    id String @id @default(cuid())
    name String @unique
}
model Departement {
    id String @id @default(cuid())
    name String @unique
}
model CommuneCanton {
    id String @id @default(cuid())
    name String @unique
}
model Arrondissement {
    id String @id @default(cuid())
    name String @unique
}
model QuartierVillage {
    id String @id @default(cuid())
    name String @unique
}

model PaymentService {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(false)
  isDefault Boolean  @default(false)
  apiKeys   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PoolType {
  OPERATIONAL
  SUPPORT
}

enum UserRole {
  VOLUNTEER
  ADMIN
  SUPERADMIN
  PRESIDENT
  VICE_PRESIDENT
  FOCAL_POINT
  COORDINATOR
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum DonationType {
  Ponctuel
  Mensuel
}

enum DonationMethod {
  Mobile_Money
  Carte_Bancaire
}

enum EventStatus {
  UPCOMING
  PAST
  CANCELLED
}

enum SponsorshipStatus {
  PENDING
  CONTACTED
  IN_DISCUSSION
  CONFIRMED
  REJECTED
}

// @@unique([isDefault, id])
// This is a way to enforce that only one document can be default.
// However, Prisma doesn't support this on a boolean field directly.
// The logic will be handled in the service layer.
