// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================================================
// MODÈLES UTILISATEURS ET AUTHENTIFICATION
// ==============================================================================
model User {
  id                      String    @id @default(cuid())
  matricule               String?   @unique
  firstName               String
  lastName                String
  email                   String    @unique
  password                String
  phone                   String?
  role                    UserRole  @default(VOLUNTEER)
  status                  UserStatus @default(PENDING) // PENDING, ACTIVE, INACTIVE, REJECTED
  
  // Champs pour l'inscription complète
  birthDate               DateTime?
  birthPlace              String?
  sex                     String? // "masculin", "féminin"
  maritalStatus           String? // "célibataire", "marié(e)", "divorcé(e)", "veuf(ve)"
  idType                  String?
  idNumber                String?
  
  address                 String?
  residenceProvince       String?
  residenceDepartement    String?
  residenceCommuneCanton  String?
  residenceArrondissement String?
  residenceQuartierVillage String?
  
  nationalityId           String?
  nationality             Nationality? @relation(fields: [nationalityId], references: [id])
  
  educationLevelId        String?
  educationLevel          EducationLevel? @relation(fields: [educationLevelId], references: [id])
  
  professionId            String?
  profession              Profession?  @relation(fields: [professionId], references: [id])

  skills                  Skill[] @relation("UserSkills")
  
  volunteerExperience     String?
  availability            String[]
  causes                  String[]
  assignedCell            String?

  photo                   String?
  idCardFront             String?
  idCardBack              String?

  // Relations
  authoredPosts           Post[]
  assignedMissions        Mission[] @relation("MissionParticipants")

  // Timestamps
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

enum UserRole {
  SUPERADMIN
  ADMIN
  VOLUNTEER
  PRESIDENT
  VICE_PRESIDENT
  FOCAL_POINT
  COORDINATOR
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}


// ==============================================================================
// MODÈLES DE CONTENU
// ==============================================================================
model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String?
  image       String?
  imageHint   String?
  visible     Boolean  @default(true)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  location    String
  date        DateTime
  image       String?
  imageHint   String?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum EventStatus {
  UPCOMING
  PAST
  CANCELLED
}

model Report {
  id          String   @id @default(cuid())
  title       String
  fileUrl     String
  visible     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


// ==============================================================================
// MODÈLE DE MISSION
// ==============================================================================
model Mission {
  id              String        @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  maxParticipants Int?
  participants    User[]        @relation("MissionParticipants")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}


// ==============================================================================
// MODÈLES DE DONNÉES GÉNÉRIQUES (pour les listes déroulantes)
// ==============================================================================
model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Profession {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model EducationLevel {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Nationality {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Province {
    id String @id @default(cuid())
    name String @unique
}
model Departement {
    id String @id @default(cuid())
    name String @unique
}
model CommuneCanton {
    id String @id @default(cuid())
    name String @unique
}
model Arrondissement {
    id String @id @default(cuid())
    name String @unique
}
model QuartierVillage {
    id String @id @default(cuid())
    name String @unique
}

// ==============================================================================
// MODÈLES FINANCIERS
// ==============================================================================
model Donation {
  id        String          @id @default(cuid())
  name      String
  email     String
  amount    Float
  type      DonationType
  method    DonationMethod
  status    DonationStatus  @default(PENDING)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum DonationType {
  Ponctuel
  Mensuel
}

enum DonationMethod {
  Mobile_Money
  Carte_Bancaire
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

model CorporateSponsorship {
  id          String   @id @default(cuid())
  companyName String
  contactName String
  email       String
  phone       String?
  message     String
  status      SponsorshipStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SponsorshipStatus {
  PENDING
  CONTACTED
  IN_DISCUSSION
  CONFIRMED
  REJECTED
}


// ==============================================================================
// MODÈLES DE SÉCURITÉ ET DE JOURNALISATION
// ==============================================================================
model RequestLog {
    id          String   @id @default(cuid())
    ip          String
    method      String
    path        String
    statusCode  Int
    userAgent   String
    isThreat    Boolean  @default(false)
    createdAt   DateTime @default(now())
}

model BlockedIP {
    id        String   @id @default(cuid())
    ip        String   @unique
    reason    String?
    createdAt DateTime @default(now())
}
