
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and authentication models
model User {
  id                      String                 @id @default(cuid())
  email                   String                 @unique
  password                String
  firstName               String
  lastName                String
  matricule               String?                @unique
  birthDate               DateTime?
  birthPlace              String?
  sex                     String?
  maritalStatus           String?
  idType                  String?
  idNumber                String?
  phone                   String?
  address                 String?
  residenceProvince       String?
  residenceDepartement    String?
  residenceCommuneCanton  String?
  residenceArrondissement String?
  residenceQuartierVillage String?
  photo                   String?
  idCardFront             String?
  idCardBack              String?
  termsAccepted           Boolean                @default(false)
  volunteerExperience     String?
  availability            String[]
  causes                  String[]
  assignedCell            String?
  role                    UserRole               @default(VOLUNTEER)
  status                  UserStatus             @default(PENDING)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  posts                   Post[]
  nationalityId           String?
  nationality             Nationality?           @relation(fields: [nationalityId], references: [id])
  educationLevelId        String?
  educationLevel          EducationLevel?        @relation(fields: [educationLevelId], references: [id])
  professionId            String?
  profession              Profession?            @relation(fields: [professionId], references: [id])
  skills                  Skill[]                @relation("UserSkills")
  missions                Mission[]              @relation("MissionParticipants")
  teamRoleId              String?
  teamRole                TeamRole?              @relation(fields: [teamRoleId], references: [id])
  coordinatingPools       TeamPool[]             @relation("PoolCoordinators")
  ArchiveItem             ArchiveItem[]
}

enum UserRole {
  VOLUNTEER
  COORDINATOR
  ADMIN
  SUPERADMIN
  DONOR
  PUBLIC
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  REJECTED
}

// Content and feature models
model Mission {
  id              String   @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime
  status          MissionStatus @default(PLANNED)
  requiredSkills  String[]
  participants    User[]   @relation("MissionParticipants")
  maxParticipants Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String
  content   String?
  image     String?
  imageHint String?
  visible   Boolean  @default(true)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  location    String
  date        DateTime
  image       String?
  imageHint   String?
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum EventStatus {
  UPCOMING
  PAST
  CANCELLED
}

model Report {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String
  visible   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id                    String         @id @default(cuid())
  name                  String
  email                 String
  amount                Float
  type                  String // Ponctuel ou Mensuel
  method                DonationMethod
  status                DonationStatus @default(PENDING)
  phone                 String?
  externalTransactionId String?        @unique
  airtelMoneyId         String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

enum DonationStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum DonationMethod {
  AirtelMoney
  CreditCard
  Other
}

model CorporateSponsorship {
  id           String            @id @default(cuid())
  companyName  String
  contactName  String
  email        String
  phone        String?
  message      String
  status       SponsorshipStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

enum SponsorshipStatus {
  PENDING
  CONTACTED
  IN_DISCUSSION
  CONFIRMED
  REJECTED
}

// Generic data models (for dropdowns, etc.)
model Skill {
  id    String @id @default(cuid())
  name  String @unique
  users User[] @relation("UserSkills")
}

model Profession {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model EducationLevel {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Nationality {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

// Location models
model Province {
  id          String   @id @default(cuid())
  name        String   @unique
  departement String[]
}

model Departement {
  id            String   @id @default(cuid())
  name          String   @unique
  communeCanton String[]
}

model CommuneCanton {
  id             String   @id @default(cuid())
  name           String   @unique
  arrondissement String[]
}

model Arrondissement {
  id              String   @id @default(cuid())
  name            String   @unique
  quartierVillage String[]
}

model QuartierVillage {
  id   String @id @default(cuid())
  name String @unique
}

// Team structure models
model TeamRole {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  users       User[]
}

model TeamPool {
  id           String  @id @default(cuid())
  name         String  @unique
  description  String?
  iconKey      String?
  type         PoolType
  coordinators User[]  @relation("PoolCoordinators")
}

enum PoolType {
  OPERATIONAL
  SUPPORT
}

// Admin and security models
model RequestLog {
  id         String   @id @default(cuid())
  ip         String
  method     String
  path       String
  statusCode Int
  userAgent  String
  isThreat   Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model BlockedIP {
  id        String   @id @default(cuid())
  ip        String   @unique
  reason    String?
  createdAt DateTime @default(now())
}

// Settings and content management models
model PaymentService {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(false)
  isDefault Boolean  @default(false)
  apiKeys   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArchiveItem {
  id         String          @id @default(cuid())
  name       String
  type       ArchiveItemType
  url        String?
  parentId   String?
  parent     ArchiveItem?    @relation("FolderChildren", fields: [parentId], references: [id])
  children   ArchiveItem[]   @relation("FolderChildren")
  authorId   String
  author     User            @relation(fields: [authorId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

enum ArchiveItemType {
  FOLDER
  DOCUMENT
  SPREADSHEET
  IMAGE
  VIDEO
  AUDIO
  PDF
  ARCHIVE
  TEXT
  UNKNOWN
}

model Appointment {
    id String @id @default(cuid())
    name String
    email String
    phone String?
    reason String
    details String?
    scheduledAt DateTime
    status AppointmentStatus @default(PENDING)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum AppointmentStatus {
    PENDING
    CONFIRMED
    CANCELLED
}

model AnnualStat {
    id String @id @default(cuid())
    year Int @unique
    bases Int
    agents Int
    firstAidGraduates Int
    assistedHouseholds Int
    sensitizedPeople Int
    condomsDistributed Int
    isVisible Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Action {
  id                 String   @id @default(cuid())
  title              String
  description        String
  image              String
  imageHint          String?
  dialogTitle        String
  dialogDescription  String
  dialogList         String[]
  order              Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Partner {
  id          String   @id @default(cuid())
  name        String
  logoUrl     String
  websiteUrl  String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
